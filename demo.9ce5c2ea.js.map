{"version":3,"sources":["js/demo.js"],"names":["MathUtils","map","x","a","b","c","d","lerp","n","body","document","winsize","calcWinsize","width","window","innerWidth","height","innerHeight","addEventListener","docScroll","getPageYScroll","pageYOffset","documentElement","scrollTop","Item","el","DOM","image","querySelector","renderedStyles","innerTranslationY","previous","current","ease","maxValue","parseInt","getComputedStyle","getPropertyValue","setValue","minValue","Math","max","min","props","top","update","observer","IntersectionObserver","entries","forEach","entry","isVisible","intersectionRatio","observe","initEvents","getSize","key","layout","rect","getBoundingClientRect","resize","style","transform","SmoothScroll","main","scrollable","items","querySelectorAll","item","push","translationY","setSize","requestAnimationFrame","render","scrollHeight","position","left","overflow","preloadImages","Promise","resolve","reject","imagesLoaded","background","classList","remove"],"mappings":"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","file":"demo.9ce5c2ea.js","sourceRoot":"../src","sourcesContent":["/**\n* demo.js\n* http://www.codrops.com\n*\n* Licensed under the MIT license.\n* http://www.opensource.org/licenses/mit-license.php\n* \n* Copyright 2019, Codrops\n* http://www.codrops.com\n*/\n{\n    // helper functions\n    const MathUtils = {\n        // map number x from range [a, b] to [c, d]\n        map: (x, a, b, c, d) => (x - a) * (d - c) / (b - a) + c,\n        // linear interpolation\n        lerp: (a, b, n) => (1 - n) * a + n * b\n    };\n\n    // body element\n    const body = document.body;\n    \n    // calculate the viewport size\n    let winsize;\n    const calcWinsize = () => winsize = {width: window.innerWidth, height: window.innerHeight};\n    calcWinsize();\n    // and recalculate on resize\n    window.addEventListener('resize', calcWinsize);\n\n    // scroll position and update function\n    let docScroll;\n    const getPageYScroll = () => docScroll = window.pageYOffset || document.documentElement.scrollTop;\n    window.addEventListener('scroll', getPageYScroll);\n\n    // Item\n    class Item {\n        constructor(el) {\n            // the .item element\n            this.DOM = {el: el};\n            // the inner image\n            this.DOM.image = this.DOM.el.querySelector('.item__img');\n            this.renderedStyles = {\n                // here we define which property will change as we scroll the page and the items is inside the viewport\n                // in this case we will be translating the image on the y-axis\n                // we interpolate between the previous and current value to achieve a smooth effect\n                innerTranslationY: {\n                    // interpolated value\n                    previous: 0, \n                    // current value\n                    current: 0, \n                    // amount to interpolate\n                    ease: 0.1,\n                    // the maximum value to translate the image is set in a CSS variable (--overflow)\n                    maxValue: parseInt(getComputedStyle(this.DOM.image).getPropertyValue('--overflow'), 10),\n                    // current value setter\n                    // the value of the translation will be:\n                    // when the item's top value (relative to the viewport) equals the window's height (items just came into the viewport) the translation = minimum value (- maximum value)\n                    // when the item's top value (relative to the viewport) equals \"-item's height\" (item just exited the viewport) the translation = maximum value\n                    setValue: () => {\n                        const maxValue = this.renderedStyles.innerTranslationY.maxValue;\n                        const minValue = -1 * maxValue;\n                        return Math.max(Math.min(MathUtils.map(this.props.top - docScroll, winsize.height, -1 * this.props.height, minValue, maxValue), maxValue), minValue)\n                    }\n                }\n            };\n            // set the initial values\n            this.update();\n            // use the IntersectionObserver API to check when the element is inside the viewport\n            // only then the element translation will be updated\n            this.observer = new IntersectionObserver((entries) => {\n                entries.forEach(entry => this.isVisible = entry.intersectionRatio > 0);\n            });\n            this.observer.observe(this.DOM.el);\n            // init/bind events\n            this.initEvents();\n        }\n        update() {\n            // gets the item's height and top (relative to the document)\n            this.getSize();\n            // sets the initial value (no interpolation)\n            for (const key in this.renderedStyles ) {\n                this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\n            }\n            // translate the image\n            this.layout();\n        }\n        getSize() {\n            const rect = this.DOM.el.getBoundingClientRect();\n            this.props = {\n                // item's height\n                height: rect.height,\n                // offset top relative to the document\n                top: docScroll + rect.top \n            }\n        }\n        initEvents() {\n            window.addEventListener('resize', () => this.resize());\n        }\n        resize() {\n            // on resize rest sizes and update the translation value\n            this.update();\n        }\n        render() {\n            // update the current and interpolated values\n            for (const key in this.renderedStyles ) {\n                this.renderedStyles[key].current = this.renderedStyles[key].setValue();\n                this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\n            }\n            // and translates the image\n            this.layout();\n        }\n        layout() {\n            // translates the image\n            this.DOM.image.style.transform = `translate3d(0,${this.renderedStyles.innerTranslationY.previous}px,0)`;\n        }\n    }\n\n    // SmoothScroll\n    class SmoothScroll {\n        constructor() {\n            // the <main> element\n            this.DOM = {main: document.querySelector('main')};\n            // the scrollable element\n            // we translate this element when scrolling (y-axis)\n            this.DOM.scrollable = this.DOM.main.querySelector('div[data-scroll]');\n            // the items on the page\n            this.items = [];\n            [...this.DOM.main.querySelectorAll('.content > .item')].forEach(item => this.items.push(new Item(item)));\n            // here we define which property will change as we scroll the page\n            // in this case we will be translating on the y-axis\n            // we interpolate between the previous and current value to achieve the smooth scrolling effect\n            this.renderedStyles = {\n                translationY: {\n                    // interpolated value\n                    previous: 0, \n                    // current value\n                    current: 0, \n                    // amount to interpolate\n                    ease: 0.1,\n                    // current value setter\n                    // in this case the value of the translation will be the same like the document scroll\n                    setValue: () => docScroll\n                }\n            };\n            // set the body's height\n            this.setSize();\n            // set the initial values\n            this.update();\n            // the <main> element's style needs to be modified\n            this.style();\n            // init/bind events\n            this.initEvents();\n            // start the render loop\n            requestAnimationFrame(() => this.render());\n        }\n        update() {\n            // sets the initial value (no interpolation) - translate the scroll value\n            for (const key in this.renderedStyles ) {\n                this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\n            }   \n            // translate the scrollable element\n            this.layout();\n        }\n        layout() {\n            // translates the scrollable element\n            this.DOM.scrollable.style.transform = `translate3d(0,${-1*this.renderedStyles.translationY.previous}px,0)`;\n        }\n        setSize() {\n            // set the heigh of the body in order to keep the scrollbar on the page\n            body.style.height = `${this.DOM.scrollable.scrollHeight}px`;\n        }\n        style() {\n            // the <main> needs to \"stick\" to the screen and not scroll\n            // for that we set it to position fixed and overflow hidden \n            this.DOM.main.style.position = 'fixed';\n            this.DOM.main.style.width = this.DOM.main.style.height = '100%';\n            this.DOM.main.style.top = this.DOM.main.style.left = 0;\n            this.DOM.main.style.overflow = 'hidden';\n        }\n        initEvents() {\n            // on resize reset the body's height\n            window.addEventListener('resize', () => this.setSize());\n        }\n        render() {\n            // update the current and interpolated values\n            for (const key in this.renderedStyles ) {\n                this.renderedStyles[key].current = this.renderedStyles[key].setValue();\n                this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\n            }\n            // and translate the scrollable element\n            this.layout();\n            \n            // for every item\n            for (const item of this.items) {\n                // if the item is inside the viewport call it's render function\n                // this will update the item's inner image translation, based on the document scroll value and the item's position on the viewport\n                if ( item.isVisible ) {\n                    item.render();\n                }\n            }\n            \n            // loop..\n            requestAnimationFrame(() => this.render());\n        }\n    }\n\n    /***********************************/\n    /********** Preload stuff **********/\n\n    // Preload images\n    const preloadImages = () => {\n        return new Promise((resolve, reject) => {\n            imagesLoaded(document.querySelectorAll('.item__img'), {background: true}, resolve);\n        });\n    };\n    \n    // And then..\n    //preloadImages().then(() => {\n        // Remove the loader\n      //  document.body.classList.remove('loading');\n        // Get the scroll position\n      //  getPageYScroll();\n        // Initialize the Smooth Scrolling\n      //  new SmoothScroll();\n    //});\n    document.body.classList.remove('loading');\n        // Get the scroll position\n        getPageYScroll();\n        // Initialize the Smooth Scrolling\n        new SmoothScroll();\n}"]}